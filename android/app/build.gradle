apply plugin: "com.android.application"

import groovy.json.JsonSlurper
/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle" //热更新

project.ext.vectoricons = [
        iconFontNames: ['FontAwesome.ttf', 'MaterialIcons.ttf', 'EvilIcons.ttf' ,'AntDesign.ttf','Entypo.ttf','EvilIcons.ttf','Ionicons.ttf','Foundation.ttf','Feather.ttf','MaterialCommunityIcons.ttf','Octicons.ttf','SimpleLineIcons.ttf']
]

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);
def getAppVersion() {
    def inputFile = new File("../package.json")
    def packageJson = new JsonSlurper().parseText(inputFile.text)
    return packageJson['version']
}
def getAppVersionCode() {
    def inputFile = new File("../package.json")
    def packageJson = new JsonSlurper().parseText(inputFile.text)
    return packageJson['versionCode']
}
def appVersion = getAppVersion()
def appVersionCode = getAppVersionCode()
android {
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
    }    
    defaultConfig {
        applicationId "com.licaimofang.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 67500
        versionName '6.7.5'
        multiDexEnabled true //配置多个dex
        flavorDimensions "default"
        // renderscriptTargetApi 23
        // renderscriptSupportModeEnabled true
        missingDimensionStrategy 'react-native-camera', 'general'
        manifestPlaceholders = [
                  UMENG_CHANNEL_VALUE: "DEFAULT_TEST",
                  JPUSH_APPKEY: "9cba9122f27784d37918105b",         //在此替换你的APPKey
                  JPUSH_CHANNEL: "developer-default",       //在此替换你的channel，也可使用默认的
                  JPUSH_PKGNAME:"com.licaimofang.app",
                  XIAOMI_APPKEY:"MI-5931731298226",//小米平台注册的appkey 
                  XIAOMI_APPID:"MI-2882303761517312226", //小米平台注册的appid
                //   VIVO_APPKEY: "e1407bc6eabff464e02a2e23c896cfbb", 
                //   VIVO_APPID: "103789828",
                //   OPPO_APPKEY: "OP-74Ie42tnouKo888gswCkscSsw", 
                //   OPPO_APPID: "OP-2328483", 
                //   OPPO_APPSECRET: "OP-10413A7D632631Af41c37FeB09986831",
          ]
        //   "x86_64","x86" 是支持模拟器架构 release可以去掉
        // "armeabi-v7a","arm64-v8a", 支持64位的
        vectorDrawables.useSupportLibrary true
      ndk {
        abiFilters "armeabi-v7a","arm64-v8a", "x86_64","x86"
       }
    }

    packagingOptions {
      pickFirst "lib/arm64-v8a/librealm-jni.so"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
             keyAlias = "alias_name"
             keyPassword = "asdjkl" // And these must be set to non-empty in order to have the signing step added to the task graph.
             storeFile = file("mofang-release-enimo.keystore")
             storePassword = "asdjkl"
        }
         release {
                // These must be set or Gradle will complain (even if they are overridden).
                keyAlias = "alias_name"
                keyPassword = "asdjkl" // And these must be set to non-empty in order to have the signing step added to the task graph.
                storeFile = file("mofang-release-enimo.keystore")
                storePassword = "asdjkl"
                v2SigningEnabled true 
            }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            resValue "string", "CodePushDeploymentKey", '""'
        }
        releaseStaging {
            resValue "string", "CodePushDeploymentKey",'"umln5OVCBk6nTjd37apOaHJDa71g4ksvOXqog"'
            matchingFallbacks = ['release']
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds //混淆
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
             android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "mofang_v${defaultConfig.versionCode}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                }
            }
            resValue "string", "CodePushDeploymentKey", '"Zf0nwukX4eu3BF8c14lysOLgVC3O4ksvOXqog"'
        }
    }
 productFlavors {
        // QQ {}
        // _360 {}
        XIAOMI {}
        // WANGDOUJIA {}
        // BAIDU {}
        // _91 {}
        // ANZHUO {}
        ZHIXING {}
        // CESHI {}
        WWW {}
        VIVO {}
        OPPO {}
        MEIZU {}
        // huanliang {}
        // yingyongbaocpd {}
        sanxing {}
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }

    }
      sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    // applicationVariants are e.g. debug, release
    // applicationVariants.all { variant ->
    //     variant.outputs.each { output ->
    //         // For each separate APK per architecture, set a unique version code as described here:
    //         // https://developer.android.com/studio/build/configure-apk-splits.html
    //         def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
    //         def abi = output.getFilter(OutputFile.ABI)
    //         if (abi != null) {  // null for the universal-debug, universal-release variants
    //             output.versionCodeOverride =
    //                     versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
    //         }

    //     }
    // }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'com.android.support:multidex:1.0.3' //配置多个dex
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation project(':jpush-react-native')  // 添加 jpush 依赖
    implementation project(':jcore-react-native')  // 添加 jcore 依赖
    implementation project(':react-native-wechat-lib') //微信
    implementation project(':react-native-splash-screen') //启动页
    implementation project(':react-native-fs') //文件读写
    implementation project(path: ':react-native-community_viewpager')
    implementation 'com.facebook.fresco:animated-gif:2.0.0'
    implementation project(':react-native-exit-app')
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }
  // 如果你需要支持Android4.0(API level 14)之前的版本
    implementation 'com.facebook.fresco:animated-base-support:1.3.0'

    // 如果你需要支持GIF动图
    implementation 'com.facebook.fresco:animated-gif:2.0.0'

    // 如果你需要支持WebP格式，包括WebP动图
    implementation 'com.facebook.fresco:animated-webp:2.1.0'
    implementation 'com.facebook.fresco:webpsupport:2.0.0'
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

      //读卡sdk
    implementation files('libs/readcard-release-v1.3.2.aar')
    implementation files('libs/FaceSdk_V1.0.7.aar')
    //androidx下 的约束布局
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
    //lottie  用户播放json动画
    implementation 'com.airbnb.android:lottie:3.4.0'
    //数据转换
    implementation 'com.google.code.gson:gson:2.8.7'
    //androidx下的support库
    implementation "androidx.legacy:legacy-support-v4:1.0.0+"
    implementation 'com.github.gzu-liyujiang:Android_CN_OAID:4.2.4'
    implementation 'com.huawei.hms:push:5.0.0.300'
    implementation 'cn.jiguang.sdk.plugin:xiaomi:4.2.8'
    // implementation 'cn.jiguang.sdk.plugin:oppo:4.2.8'
    // implementation 'cn.jiguang.sdk.plugin:vivo:4.2.8'
    //https://developer.huawei.com/consumer/cn/doc/development/HMSCore-Guides/android-app-version-0000001074227861
    //厂商版本和JPush SDK版本保持一致
    implementation 'cn.jiguang.sdk.plugin:huawei:4.2.8'
    
}
apply plugin: 'com.huawei.agconnect'
// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}