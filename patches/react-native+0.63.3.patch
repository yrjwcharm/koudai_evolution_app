diff --git a/node_modules/react-native/Libraries/.DS_Store b/node_modules/react-native/Libraries/.DS_Store
new file mode 100644
index 0000000..a7b56b9
Binary files /dev/null and b/node_modules/react-native/Libraries/.DS_Store differ
diff --git a/node_modules/react-native/Libraries/Animated/release/.npmignore b/node_modules/react-native/Libraries/Animated/release/.gitignore
similarity index 100%
rename from node_modules/react-native/Libraries/Animated/release/.npmignore
rename to node_modules/react-native/Libraries/Animated/release/.gitignore
diff --git a/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm b/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm
index 274f381..adc80a7 100644
--- a/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm
+++ b/node_modules/react-native/Libraries/Network/RCTHTTPRequestHandler.mm
@@ -173,7 +173,90 @@ - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didComp
   }
   [delegate URLRequest:task didCompleteWithError:error];
 }
+- (void)URLSession:(NSURLSession *)session
+didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge
+ completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler
+{
+  //挑战处理类型为 默认
+  /*
+   NSURLSessionAuthChallengePerformDefaultHandling：默认方式处理
+   NSURLSessionAuthChallengeUseCredential：使用指定的证书
+   NSURLSessionAuthChallengeCancelAuthenticationChallenge：取消挑战
+   */
+//  __weak typeof(self) weakSelf = self;
+  NSURLSessionAuthChallengeDisposition disposition = NSURLSessionAuthChallengePerformDefaultHandling;
+  __block NSURLCredential *credential = nil;
+  
+  // sessionDidReceiveAuthenticationChallenge是自定义方法，用来如何应对服务器端的认证挑战
+  
+  // 而这个证书就需要使用credentialForTrust:来创建一个NSURLCredential对象
+  if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {
+    
+    // 创建挑战证书（注：挑战方式为UseCredential和PerformDefaultHandling都需要新建挑战证书）
+    credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];
+    // 确定挑战的方式
+    if (credential) {
+      //证书挑战  设计policy,none，则跑到这里
+      disposition = NSURLSessionAuthChallengeUseCredential;
+    } else {
+      disposition = NSURLSessionAuthChallengePerformDefaultHandling;
+    }
+  } else {
+    // client authentication
+    SecIdentityRef identity = NULL;
+    SecTrustRef trust = NULL;
+    NSString *p12 = [[NSBundle mainBundle] pathForResource:@"iot" ofType:@"p12"];
+    NSFileManager *fileManager =[NSFileManager defaultManager];
+    
+    if(![fileManager fileExistsAtPath:p12])
+    {
+      NSLog(@"iot.p12:not exist");
+    }
+    else
+    {
+      NSData *PKCS12Data = [NSData dataWithContentsOfFile:p12];
+      
+      if ([[self class]extractIdentity:&identity andTrust:&trust fromPKCS12Data:PKCS12Data])
+      {
+        SecCertificateRef certificate = NULL;
+        SecIdentityCopyCertificate(identity, &certificate);
+        const void*certs[] = {certificate};
+        CFArrayRef certArray =CFArrayCreate(kCFAllocatorDefault, certs,1,NULL);
+        credential =[NSURLCredential credentialWithIdentity:identity certificates:(__bridge  NSArray*)certArray persistence:NSURLCredentialPersistencePermanent];
+        disposition =NSURLSessionAuthChallengeUseCredential;
+      }
+    }
+    
+  }
   
+  //完成挑战
+  if (completionHandler) {
+    completionHandler(disposition, credential);
+  }
+}
++(BOOL)extractIdentity:(SecIdentityRef*)outIdentity andTrust:(SecTrustRef *)outTrust fromPKCS12Data:(NSData *)inPKCS12Data {
+  OSStatus securityError = errSecSuccess;
+  //client certificate password
+  NSDictionary*optionsDictionary = [NSDictionary dictionaryWithObject:@""
+                                                               forKey:(__bridge id)kSecImportExportPassphrase];
+  
+  CFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);
+  securityError = SecPKCS12Import((__bridge CFDataRef)inPKCS12Data,(__bridge CFDictionaryRef)optionsDictionary,&items);
+  
+  if(securityError == 0) {
+    CFDictionaryRef myIdentityAndTrust = (CFDictionaryRef)CFArrayGetValueAtIndex(items,0);
+    const void*tempIdentity =NULL;
+    tempIdentity= CFDictionaryGetValue (myIdentityAndTrust,kSecImportItemIdentity);
+    *outIdentity = (SecIdentityRef)tempIdentity;
+    const void*tempTrust =NULL;
+    tempTrust = CFDictionaryGetValue(myIdentityAndTrust,kSecImportItemTrust);
+    *outTrust = (SecTrustRef)tempTrust;
+  } else {
+    NSLog(@"Failedwith error code %d",(int)securityError);
+    return NO;
+  }
+  return YES;
+}
 @end
 
 Class RCTHTTPRequestHandlerCls(void) {
diff --git a/node_modules/react-native/ReactAndroid/src/main/jni/first-party/fbjni/.npmignore b/node_modules/react-native/ReactAndroid/src/main/jni/first-party/fbjni/.gitignore
similarity index 100%
rename from node_modules/react-native/ReactAndroid/src/main/jni/first-party/fbjni/.npmignore
rename to node_modules/react-native/ReactAndroid/src/main/jni/first-party/fbjni/.gitignore
diff --git a/node_modules/react-native/ReactCommon/hermes/inspector/tools/msggen/.npmignore b/node_modules/react-native/ReactCommon/hermes/inspector/tools/msggen/.gitignore
similarity index 100%
rename from node_modules/react-native/ReactCommon/hermes/inspector/tools/msggen/.npmignore
rename to node_modules/react-native/ReactCommon/hermes/inspector/tools/msggen/.gitignore
diff --git a/node_modules/react-native/scripts/.packager.env b/node_modules/react-native/scripts/.packager.env
new file mode 100644
index 0000000..21a13cf
--- /dev/null
+++ b/node_modules/react-native/scripts/.packager.env
@@ -0,0 +1 @@
+export RCT_METRO_PORT=8081
\ No newline at end of file
