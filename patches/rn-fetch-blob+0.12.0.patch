diff --git a/node_modules/rn-fetch-blob/.DS_Store b/node_modules/rn-fetch-blob/.DS_Store
new file mode 100644
index 0000000..36d39ae
Binary files /dev/null and b/node_modules/rn-fetch-blob/.DS_Store differ
diff --git a/node_modules/rn-fetch-blob/ios/RNFetchBlobRequest.m b/node_modules/rn-fetch-blob/ios/RNFetchBlobRequest.m
index cdbe6b1..84e5981 100644
--- a/node_modules/rn-fetch-blob/ios/RNFetchBlobRequest.m
+++ b/node_modules/rn-fetch-blob/ios/RNFetchBlobRequest.m
@@ -449,12 +449,90 @@ - (void) URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didSen
          ];
     }
 }
-
++(BOOL)extractIdentity:(SecIdentityRef*)outIdentity andTrust:(SecTrustRef *)outTrust fromPKCS12Data:(NSData *)inPKCS12Data {
+  OSStatus securityError = errSecSuccess;
+  //client certificate password
+  NSDictionary*optionsDictionary = [NSDictionary dictionaryWithObject:@""
+                                                               forKey:(__bridge id)kSecImportExportPassphrase];
+  
+  CFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);
+  securityError = SecPKCS12Import((__bridge CFDataRef)inPKCS12Data,(__bridge CFDictionaryRef)optionsDictionary,&items);
+  
+  if(securityError == 0) {
+    CFDictionaryRef myIdentityAndTrust = (CFDictionaryRef)CFArrayGetValueAtIndex(items,0);
+    const void*tempIdentity =NULL;
+    tempIdentity= CFDictionaryGetValue (myIdentityAndTrust,kSecImportItemIdentity);
+    *outIdentity = (SecIdentityRef)tempIdentity;
+    const void*tempTrust =NULL;
+    tempTrust = CFDictionaryGetValue(myIdentityAndTrust,kSecImportItemTrust);
+    *outTrust = (SecTrustRef)tempTrust;
+  } else {
+    NSLog(@"Failedwith error code %d",(int)securityError);
+    return NO;
+  }
+  return YES;
+}
 
 - (void) URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable credantial))completionHandler
 {
     if ([[options valueForKey:CONFIG_TRUSTY] boolValue]) {
-        completionHandler(NSURLSessionAuthChallengeUseCredential, [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust]);
+//        completionHandler(NSURLSessionAuthChallengeUseCredential, [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust]);
+        //挑战处理类型为 默认
+        /*
+         NSURLSessionAuthChallengePerformDefaultHandling：默认方式处理
+         NSURLSessionAuthChallengeUseCredential：使用指定的证书
+         NSURLSessionAuthChallengeCancelAuthenticationChallenge：取消挑战
+         */
+      //  __weak typeof(self) weakSelf = self;
+        NSURLSessionAuthChallengeDisposition disposition = NSURLSessionAuthChallengePerformDefaultHandling;
+        __block NSURLCredential *credential = nil;
+        
+        // sessionDidReceiveAuthenticationChallenge是自定义方法，用来如何应对服务器端的认证挑战
+        
+        // 而这个证书就需要使用credentialForTrust:来创建一个NSURLCredential对象
+        if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {
+          
+          // 创建挑战证书（注：挑战方式为UseCredential和PerformDefaultHandling都需要新建挑战证书）
+          credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];
+          // 确定挑战的方式
+          if (credential) {
+            //证书挑战  设计policy,none，则跑到这里
+            disposition = NSURLSessionAuthChallengeUseCredential;
+          } else {
+            disposition = NSURLSessionAuthChallengePerformDefaultHandling;
+          }
+        } else {
+          // client authentication
+          SecIdentityRef identity = NULL;
+          SecTrustRef trust = NULL;
+          NSString *p12 = [[NSBundle mainBundle] pathForResource:@"iot" ofType:@"p12"];
+          NSFileManager *fileManager =[NSFileManager defaultManager];
+          
+          if(![fileManager fileExistsAtPath:p12])
+          {
+            NSLog(@"iot.p12:not exist");
+          }
+          else
+          {
+            NSData *PKCS12Data = [NSData dataWithContentsOfFile:p12];
+            
+            if ([[self class]extractIdentity:&identity andTrust:&trust fromPKCS12Data:PKCS12Data])
+            {
+              SecCertificateRef certificate = NULL;
+              SecIdentityCopyCertificate(identity, &certificate);
+              const void*certs[] = {certificate};
+              CFArrayRef certArray =CFArrayCreate(kCFAllocatorDefault, certs,1,NULL);
+              credential =[NSURLCredential credentialWithIdentity:identity certificates:(__bridge  NSArray*)certArray persistence:NSURLCredentialPersistencePermanent];
+              disposition =NSURLSessionAuthChallengeUseCredential;
+            }
+          }
+          
+        }
+        
+        //完成挑战
+        if (completionHandler) {
+          completionHandler(disposition, credential);
+        }
     } else {
         completionHandler(NSURLSessionAuthChallengePerformDefaultHandling, [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust]);
     }
