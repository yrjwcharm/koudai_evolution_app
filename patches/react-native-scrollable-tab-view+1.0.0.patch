diff --git a/node_modules/react-native-scrollable-tab-view/index.js b/node_modules/react-native-scrollable-tab-view/index.js
index 82e53c5..6b8c270 100644
--- a/node_modules/react-native-scrollable-tab-view/index.js
+++ b/node_modules/react-native-scrollable-tab-view/index.js
@@ -56,6 +56,7 @@ const ScrollableTabView = createReactClass({
     return {
       tabBarPosition: 'top',
       initialPage: 0,
+      isUseViewPager:false,
       page: -1,
       onChangeTab: () => {},
       onScroll: () => {},
@@ -72,8 +73,8 @@ const ScrollableTabView = createReactClass({
     let scrollXIOS;
     let positionAndroid;
     let offsetAndroid;
-
-    if (Platform.OS === 'ios') {
+    if(this.props.isUseViewPager){
+      if (Platform.OS === 'ios') {
       scrollXIOS = new Animated.Value(this.props.initialPage * containerWidth);
       const containerWidthAnimatedValue = new Animated.Value(containerWidth);
       // Need to call __makeNative manually to avoid a native animated bug. See
@@ -83,26 +84,58 @@ const ScrollableTabView = createReactClass({
 
       const callListeners = this._polyfillAnimatedValue(scrollValue);
       scrollXIOS.addListener(
-        ({ value, }) => callListeners(value / this.state.containerWidth)
+          ({ value, }) => callListeners(value / this.state.containerWidth)
       );
-    } else {
-      positionAndroid = new Animated.Value(this.props.initialPage);
-      offsetAndroid = new Animated.Value(0);
-      scrollValue = Animated.add(positionAndroid, offsetAndroid);
+      } else {
+        positionAndroid = new Animated.Value(this.props.initialPage);
+        offsetAndroid = new Animated.Value(0);
+        scrollValue = Animated.add(positionAndroid, offsetAndroid);
+
+        const callListeners = this._polyfillAnimatedValue(scrollValue);
+        let positionAndroidValue = this.props.initialPage;
+        let offsetAndroidValue = 0;
+        positionAndroid.addListener(({ value, }) => {
+          positionAndroidValue = value;
+          callListeners(positionAndroidValue + offsetAndroidValue);
+        });
+        offsetAndroid.addListener(({ value, }) => {
+          offsetAndroidValue = value;
+          callListeners(positionAndroidValue + offsetAndroidValue);
+        });
+      }
+    }else{
+      // if (Platform.OS === 'ios') {
+      scrollXIOS = new Animated.Value(this.props.initialPage * containerWidth);
+      const containerWidthAnimatedValue = new Animated.Value(containerWidth);
+      // Need to call __makeNative manually to avoid a native animated bug. See
+      // https://github.com/facebook/react-native/pull/14435
+      containerWidthAnimatedValue.__makeNative();
+      scrollValue = Animated.divide(scrollXIOS, containerWidthAnimatedValue);
 
       const callListeners = this._polyfillAnimatedValue(scrollValue);
-      let positionAndroidValue = this.props.initialPage;
-      let offsetAndroidValue = 0;
-      positionAndroid.addListener(({ value, }) => {
-        positionAndroidValue = value;
-        callListeners(positionAndroidValue + offsetAndroidValue);
-      });
-      offsetAndroid.addListener(({ value, }) => {
-        offsetAndroidValue = value;
-        callListeners(positionAndroidValue + offsetAndroidValue);
-      });
+      scrollXIOS.addListener(
+          ({ value, }) => callListeners(value / this.state.containerWidth)
+      );
+      // } else {
+      //   positionAndroid = new Animated.Value(this.props.initialPage);
+      //   offsetAndroid = new Animated.Value(0);
+      //   scrollValue = Animated.add(positionAndroid, offsetAndroid);
+
+      //   const callListeners = this._polyfillAnimatedValue(scrollValue);
+      //   let positionAndroidValue = this.props.initialPage;
+      //   let offsetAndroidValue = 0;
+      //   positionAndroid.addListener(({ value, }) => {
+      //     positionAndroidValue = value;
+      //     callListeners(positionAndroidValue + offsetAndroidValue);
+      //   });
+      //   offsetAndroid.addListener(({ value, }) => {
+      //     offsetAndroidValue = value;
+      //     callListeners(positionAndroidValue + offsetAndroidValue);
+      //   });
+      // }
     }
 
+
     return {
       currentPage: this.props.initialPage,
       scrollValue,
@@ -125,30 +158,57 @@ const ScrollableTabView = createReactClass({
   },
 
   componentWillUnmount() {
-    if (Platform.OS === 'ios') {
+    if(this.props.isUseViewPager) {
+      if (Platform.OS === 'ios') {
       this.state.scrollXIOS.removeAllListeners();
-    } else {
-      this.state.positionAndroid.removeAllListeners();
-      this.state.offsetAndroid.removeAllListeners();
+      } else {
+        this.state.positionAndroid.removeAllListeners();
+        this.state.offsetAndroid.removeAllListeners();
+      }
+    }else{
+      // if (Platform.OS === 'ios') {
+      this.state.scrollXIOS.removeAllListeners();
+      // } else {
+      //   this.state.positionAndroid.removeAllListeners();
+      //   this.state.offsetAndroid.removeAllListeners();
+      // }
     }
   },
 
   goToPage(pageNumber) {
-    if (Platform.OS === 'ios') {
+    if(this.props.isUseViewPager){
+      if (Platform.OS === 'ios') {
       const offset = pageNumber * this.state.containerWidth;
       if (this.scrollView) {
-        this.scrollView.getNode().scrollTo({x: offset, y: 0, animated: !this.props.scrollWithoutAnimation, });
+        this.scrollView.scrollTo({x: offset, y: 0, animated: !this.props.scrollWithoutAnimation,});
       }
-    } else {
-      if (this.scrollView) {
-        if (this.props.scrollWithoutAnimation) {
-          this.scrollView.getNode().setPageWithoutAnimation(pageNumber);
-        } else {
-          this.scrollView.getNode().setPage(pageNumber);
+      } else {
+        if (this.scrollView) {
+          if (this.props.scrollWithoutAnimation) {
+            this.scrollView.getNode().setPageWithoutAnimation(pageNumber);
+          } else {
+            this.scrollView.getNode().setPage(pageNumber);
+          }
         }
       }
+    }else{
+      // if (Platform.OS === 'ios') {
+      const offset = pageNumber * this.state.containerWidth;
+      if (this.scrollView) {
+        this.scrollView.scrollTo({x: offset, y: 0, animated: !this.props.scrollWithoutAnimation, });
+      }
+      // } else {
+      //   if (this.scrollView) {
+      //     if (this.props.scrollWithoutAnimation) {
+      //       this.scrollView.getNode().setPageWithoutAnimation(pageNumber);
+      //     } else {
+      //       this.scrollView.getNode().setPage(pageNumber);
+      //     }
+      //   }
+      // }
     }
 
+
     const currentPage = this.state.currentPage;
     this.updateSceneKeys({
       page: pageNumber,
@@ -223,57 +283,116 @@ const ScrollableTabView = createReactClass({
   },
 
   renderScrollableContent() {
-    if (Platform.OS === 'ios') {
+    if(this.props.isUseViewPager){
+      if (Platform.OS === 'ios') {
       const scenes = this._composeScenes();
       return <Animated.ScrollView
-        horizontal
-        pagingEnabled
-        automaticallyAdjustContentInsets={false}
-        contentOffset={{ x: this.props.initialPage * this.state.containerWidth, }}
-        ref={(scrollView) => { this.scrollView = scrollView; }}
-        onScroll={Animated.event(
-          [{ nativeEvent: { contentOffset: { x: this.state.scrollXIOS, }, }, }, ],
-          { useNativeDriver: true, listener: this._onScroll, }
-        )}
-        onMomentumScrollBegin={this._onMomentumScrollBeginAndEnd}
-        onMomentumScrollEnd={this._onMomentumScrollBeginAndEnd}
-        scrollEventThrottle={16}
-        scrollsToTop={false}
-        showsHorizontalScrollIndicator={false}
-        scrollEnabled={!this.props.locked}
-        directionalLockEnabled
-        alwaysBounceVertical={false}
-        keyboardDismissMode="on-drag"
-        {...this.props.contentProps}
+          horizontal
+          pagingEnabled
+          automaticallyAdjustContentInsets={false}
+          contentOffset={{ x: this.props.initialPage * this.state.containerWidth, }}
+          ref={(scrollView) => { this.scrollView = scrollView; }}
+          onScroll={Animated.event(
+              [{ nativeEvent: { contentOffset: { x: this.state.scrollXIOS, }, }, }, ],
+              { useNativeDriver: true, listener: this._onScroll, }
+          )}
+          onMomentumScrollBegin={this._onMomentumScrollBeginAndEnd}
+          onMomentumScrollEnd={this._onMomentumScrollBeginAndEnd}
+          scrollEventThrottle={16}
+          scrollsToTop={false}
+          showsHorizontalScrollIndicator={false}
+          scrollEnabled={!this.props.locked}
+          directionalLockEnabled
+          alwaysBounceVertical={false}
+          keyboardDismissMode="on-drag"
+          {...this.props.contentProps}
       >
-          {scenes}
+        {scenes}
       </Animated.ScrollView>;
-    } else {
-      const scenes = this._composeScenes();
-      return <AnimatedViewPagerAndroid
-        key={this._children().length}
-        style={styles.scrollableContentAndroid}
-        initialPage={this.props.initialPage}
-        onPageSelected={this._updateSelectedPage}
-        keyboardDismissMode="on-drag"
-        scrollEnabled={!this.props.locked}
-        onPageScroll={Animated.event(
-          [{
-            nativeEvent: {
-              position: this.state.positionAndroid,
-              offset: this.state.offsetAndroid,
+      }
+      else {
+        const scenes = this._composeScenes();
+        return <AnimatedViewPagerAndroid
+          key={this._children().length}
+          style={styles.scrollableContentAndroid}
+          initialPage={this.props.initialPage}
+          onPageSelected={this._updateSelectedPage}
+          keyboardDismissMode="on-drag"
+          scrollEnabled={!this.props.locked}
+          onPageScroll={Animated.event(
+            [{
+              nativeEvent: {
+                position: this.state.positionAndroid,
+                offset: this.state.offsetAndroid,
+              },
+            }, ],
+            {
+              useNativeDriver: true,
+              listener: this._onScroll,
             },
-          }, ],
-          {
-            useNativeDriver: true,
-            listener: this._onScroll,
-          },
-        )}
-        ref={(scrollView) => { this.scrollView = scrollView; }}
-        {...this.props.contentProps}
+          )}
+          ref={(scrollView) => { this.scrollView = scrollView; }}
+          {...this.props.contentProps}
+        >
+          {scenes}
+        </AnimatedViewPagerAndroid>;
+      }
+    }else {
+      // if (Platform.OS === 'ios') {
+      const scenes = this._composeScenes();
+      return <Animated.ScrollView
+          horizontal
+          pagingEnabled
+          automaticallyAdjustContentInsets={false}
+          contentOffset={{x: this.props.initialPage * this.state.containerWidth,}}
+          ref={(scrollView) => {
+            this.scrollView = scrollView;
+          }}
+          onScroll={Animated.event(
+              [{nativeEvent: {contentOffset: {x: this.state.scrollXIOS,},},},],
+              {useNativeDriver: true, listener: this._onScroll,}
+          )}
+          onMomentumScrollBegin={this._onMomentumScrollBeginAndEnd}
+          onMomentumScrollEnd={this._onMomentumScrollBeginAndEnd}
+          scrollEventThrottle={16}
+          scrollsToTop={false}
+          showsHorizontalScrollIndicator={false}
+          scrollEnabled={!this.props.locked}
+          directionalLockEnabled
+          alwaysBounceVertical={false}
+          keyboardDismissMode="on-drag"
+          {...this.props.contentProps}
       >
         {scenes}
-      </AnimatedViewPagerAndroid>;
+      </Animated.ScrollView>;
+      // }
+      // else {
+      //   const scenes = this._composeScenes();
+      //   return <AnimatedViewPagerAndroid
+      //     key={this._children().length}
+      //     style={styles.scrollableContentAndroid}
+      //     initialPage={this.props.initialPage}
+      //     onPageSelected={this._updateSelectedPage}
+      //     keyboardDismissMode="on-drag"
+      //     scrollEnabled={!this.props.locked}
+      //     onPageScroll={Animated.event(
+      //       [{
+      //         nativeEvent: {
+      //           position: this.state.positionAndroid,
+      //           offset: this.state.offsetAndroid,
+      //         },
+      //       }, ],
+      //       {
+      //         useNativeDriver: true,
+      //         listener: this._onScroll,
+      //       },
+      //     )}
+      //     ref={(scrollView) => { this.scrollView = scrollView; }}
+      //     {...this.props.contentProps}
+      //   >
+      //     {scenes}
+      //   </AnimatedViewPagerAndroid>;
+      // }
     }
   },
 
@@ -320,17 +439,32 @@ const ScrollableTabView = createReactClass({
   },
 
   _onScroll(e) {
-    if (Platform.OS === 'ios') {
+    if(this.props.isUseViewPager){
+      if (Platform.OS === 'ios') {
       const offsetX = e.nativeEvent.contentOffset.x;
       if (offsetX === 0 && !this.scrollOnMountCalled) {
         this.scrollOnMountCalled = true;
       } else {
         this.props.onScroll(offsetX / this.state.containerWidth);
       }
-    } else {
-      const { position, offset, } = e.nativeEvent;
-      this.props.onScroll(position + offset);
+      } else {
+        const { position, offset, } = e.nativeEvent;
+        this.props.onScroll(position + offset);
+      }
+    }else{
+      // if (Platform.OS === 'ios') {
+      const offsetX = e.nativeEvent.contentOffset.x;
+      if (offsetX === 0 && !this.scrollOnMountCalled) {
+        this.scrollOnMountCalled = true;
+      } else {
+        this.props.onScroll(offsetX / this.state.containerWidth);
+      }
+      // } else {
+      //   const { position, offset, } = e.nativeEvent;
+      //   this.props.onScroll(position + offset);
+      // }
     }
+
   },
 
   _handleLayout(e) {
@@ -339,20 +473,38 @@ const ScrollableTabView = createReactClass({
     if (!width || width <= 0 || Math.round(width) === Math.round(this.state.containerWidth)) {
       return;
     }
-    
-    if (Platform.OS === 'ios') {
+    if(this.props.isUseViewPager){
+      if (Platform.OS === 'ios') {
       const containerWidthAnimatedValue = new Animated.Value(width);
       // Need to call __makeNative manually to avoid a native animated bug. See
       // https://github.com/facebook/react-native/pull/14435
       containerWidthAnimatedValue.__makeNative();
       scrollValue = Animated.divide(this.state.scrollXIOS, containerWidthAnimatedValue);
       this.setState({ containerWidth: width, scrollValue, });
-    } else {
-      this.setState({ containerWidth: width, });
+      }
+      else {
+        this.setState({ containerWidth: width, });
+      }
+      this.requestAnimationFrame(() => {
+        this.goToPage(this.state.currentPage);
+      });
+    }else {
+      // if (Platform.OS === 'ios') {
+      const containerWidthAnimatedValue = new Animated.Value(width);
+      // Need to call __makeNative manually to avoid a native animated bug. See
+      // https://github.com/facebook/react-native/pull/14435
+      containerWidthAnimatedValue.__makeNative();
+      scrollValue = Animated.divide(this.state.scrollXIOS, containerWidthAnimatedValue);
+      this.setState({ containerWidth: width, scrollValue, });
+      // }
+      // else {
+      //   this.setState({ containerWidth: width, });
+      // }
+      this.requestAnimationFrame(() => {
+        this.goToPage(this.state.currentPage);
+      });
     }
-    this.requestAnimationFrame(() => {
-      this.goToPage(this.state.currentPage);
-    });
+
   },
 
   _children(children = this.props.children) {
